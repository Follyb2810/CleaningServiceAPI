// using Microsoft.EntityFrameworkCore;
// using CleaningService.Data;
// using CleaningService.Models;
// using Microsoft.AspNetCore.Mvc;

// // DTOs for API requests/responses
// namespace CleaningService.DTOs
// {
//     public class CreateUserDto
//     {
//         public string FullName { get; set; }
//         public string Email { get; set; }
//         public string PhoneNumber { get; set; }
//         public string Address { get; set; }
//         public string City { get; set; }
//         public string PostalCode { get; set; }
//     }

//     public class CreateBookingDto
//     {
//         public int UserId { get; set; }
//         public int? SubscriptionId { get; set; }
//         public DateTime ScheduledDate { get; set; }
//         public TimeSpan ScheduledTime { get; set; }
//         public int DurationHours { get; set; }
//         public string ServiceAddress { get; set; }
//         public string? SpecialInstructions { get; set; }
//         public BookingType Type { get; set; }
//         public decimal Price { get; set; }
//     }

//     public class CreateSubscriptionDto
//     {
//         public int UserId { get; set; }
//         public int SubscriptionPlanId { get; set; }
//         public DateTime StartDate { get; set; }
//         public string PaymentMethod { get; set; }
//         public string PaymentReference { get; set; }
//     }

//     public class CleanerAssignmentDto
//     {
//         public int BookingId { get; set; }
//         public int CleanerId { get; set; }
//     }

//     public class BookingCompletionDto
//     {
//         public int BookingId { get; set; }
//         public string? CleanerNotes { get; set; }
//         public int? Rating { get; set; }
//         public string? CustomerFeedback { get; set; }
//     }
// }

// // Services
// namespace CleaningService.Services
// {
//     public interface IUserService
//     {
//         Task<User> CreateUserAsync(CreateUserDto dto);
//         Task<User> GetUserByIdAsync(int id);
//         Task<User> GetUserByEmailAsync(string email);
//         Task<IEnumerable<User>> GetAllUsersAsync();
//         Task<User> UpdateUserAsync(int id, CreateUserDto dto);
//         Task<bool> DeleteUserAsync(int id);
//     }

//     public interface IBookingService
//     {
//         Task<Booking> CreateBookingAsync(CreateBookingDto dto);
//         Task<Booking> GetBookingByIdAsync(int id);
//         Task<IEnumerable<Booking>> GetBookingsByUserAsync(int userId);
//         Task<IEnumerable<Booking>> GetBookingsByCleanerAsync(int cleanerId);
//         Task<IEnumerable<Booking>> GetBookingsByDateRangeAsync(DateTime startDate, DateTime endDate);
//         Task<Booking> AssignCleanerAsync(int bookingId, int cleanerId);
//         Task<Booking> CompleteBookingAsync(BookingCompletionDto dto);
//         Task<Booking> CancelBookingAsync(int bookingId);
//         Task<IEnumerable<Cleaner>> GetAvailableCleanersAsync(DateTime date, TimeSpan time, int durationHours);
//     }

//     public interface ISubscriptionService
//     {
//         Task<Subscription> CreateSubscriptionAsync(CreateSubscriptionDto dto);
//         Task<Subscription> GetSubscriptionByIdAsync(int id);
//         Task<IEnumerable<Subscription>> GetSubscriptionsByUserAsync(int userId);
//         Task<Subscription> UpdateSubscriptionStatusAsync(int id, SubscriptionStatus status);
//         Task<IEnumerable<Booking>> GenerateRecurringBookingsAsync(int subscriptionId);
//         Task<IEnumerable<SubscriptionPlan>> GetAllSubscriptionPlansAsync();
//     }

//     public class UserService : IUserService
//     {
//         private readonly CleaningServiceDbContext _context;

//         public UserService(CleaningServiceDbContext context)
//         {
//             _context = context;
//         }

//         public async Task<User> CreateUserAsync(CreateUserDto dto)
//         {
//             var user = new User
//             {
//                 FullName = dto.FullName,
//                 Email = dto.Email,
//                 PhoneNumber = dto.PhoneNumber,
//                 Address = dto.Address,
//                 City = dto.City,
//                 PostalCode = dto.PostalCode
//             };

//             _context.Users.Add(user);
//             await _context.SaveChangesAsync();
//             return user;
//         }

//         public async Task<User> GetUserByIdAsync(int id)
//         {
//             return await _context.Users
//                 .Include(u => u.Subscriptions)
//                 .ThenInclude(s => s.SubscriptionPlan)
//                 .Include(u => u.Bookings)
//                 .FirstOrDefaultAsync(u => u.Id == id);
//         }

//         public async Task<User> GetUserByEmailAsync(string email)
//         {
//             return await _context.Users
//                 .Include(u => u.Subscriptions)
//                 .Include(u => u.Bookings)
//                 .FirstOrDefaultAsync(u => u.Email == email);
//         }

//         public async Task<IEnumerable<User>> GetAllUsersAsync()
//         {
//             return await _context.Users
//                 .Include(u => u.Subscriptions)
//                 .Include(u => u.Bookings)
//                 .ToListAsync();
//         }

//         public async Task<User> UpdateUserAsync(int id, CreateUserDto dto)
//         {
//             var user = await _context.Users.FindAsync(id);
//             if (user == null) return null;

//             user.FullName = dto.FullName;
//             user.Email = dto.Email;
//             user.PhoneNumber = dto.PhoneNumber;
//             user.Address = dto.Address;
//             user.City = dto.City;
//             user.PostalCode = dto.PostalCode;
//             user.UpdatedAt = DateTime.UtcNow;

//             await _context.SaveChangesAsync();
//             return user;
//         }

//         public async Task<bool> DeleteUserAsync(int id)
//         {
//             var user = await _context.Users.FindAsync(id);
//             if (user == null) return false;

//             _context.Users.Remove(user);
//             await _context.SaveChangesAsync();
//             return true;
//         }
//     }

//     public class BookingService : IBookingService
//     {
//         private readonly CleaningServiceDbContext _context;

//         public BookingService(CleaningServiceDbContext context)
//         {
//             _context = context;
//         }

//         public async Task<Booking> CreateBookingAsync(CreateBookingDto dto)
//         {
//             var booking = new Booking
//             {
//                 UserId = dto.UserId,
//                 SubscriptionId = dto.SubscriptionId,
//                 ScheduledDate = dto.ScheduledDate,
//                 ScheduledTime = dto.ScheduledTime,
//                 DurationHours = dto.DurationHours,
//                 ServiceAddress = dto.ServiceAddress,
//                 SpecialInstructions = dto.SpecialInstructions,
//                 Type = dto.Type,
//                 Price = dto.Price,
//                 Status = BookingStatus.Scheduled
//             };

//             _context.Bookings.Add(booking);
//             await _context.SaveChangesAsync();
//             return booking;
//         }

//         public async Task<Booking> GetBookingByIdAsync(int id)
//         {
//             return await _context.Bookings
//                 .Include(b => b.User)
//                 .Include(b => b.Cleaner)
//                 .Include(b => b.Subscription)
//                 .FirstOrDefaultAsync(b => b.Id == id);
//         }

//         public async Task<IEnumerable<Booking>> GetBookingsByUserAsync(int userId)
//         {
//             return await _context.Bookings
//                 .Include(b => b.Cleaner)
//                 .Include(b => b.Subscription)
//                 .Where(b => b.UserId == userId)
//                 .OrderByDescending(b => b.ScheduledDate)
//                 .ToListAsync();
//         }

//         public async Task<IEnumerable<Booking>> GetBookingsByCleanerAsync(int cleanerId)
//         {
//             return await _context.Bookings
//                 .Include(b => b.User)
//                 .Include(b => b.Subscription)
//                 .Where(b => b.CleanerId == cleanerId)
//                 .OrderBy(b => b.ScheduledDate)
//                 .ToListAsync();
//         }

//         public async Task<IEnumerable<Booking>> GetBookingsByDateRangeAsync(DateTime startDate, DateTime endDate)
//         {
//             return await _context.Bookings
//                 .Include(b => b.User)
//                 .Include(b => b.Cleaner)
//                 .Where(b => b.ScheduledDate >= startDate && b.ScheduledDate <= endDate)
//                 .OrderBy(b => b.ScheduledDate)
//                 .ToListAsync();
//         }

//         public async Task<Booking> AssignCleanerAsync(int bookingId, int cleanerId)
//         {
//             var booking = await _context.Bookings.FindAsync(bookingId);
//             if (booking == null) return null;

//             // Check if cleaner is available
//             var cleaner = await _context.Cleaners.FindAsync(cleanerId);
//             if (cleaner == null || !cleaner.IsAvailable) return null;

//             booking.CleanerId = cleanerId;
//             booking.UpdatedAt = DateTime.UtcNow;

//             await _context.SaveChangesAsync();
//             return await GetBookingByIdAsync(bookingId);
//         }

//         public async Task<Booking> CompleteBookingAsync(BookingCompletionDto dto)
//         {
//             var booking = await _context.Bookings.FindAsync(dto.BookingId);
//             if (booking == null) return null;

//             booking.Status = BookingStatus.Completed;
//             booking.CompletedAt = DateTime.UtcNow;
//             booking.CleanerNotes = dto.CleanerNotes;
//             booking.Rating = dto.Rating;
//             booking.CustomerFeedback = dto.CustomerFeedback;
//             booking.UpdatedAt = DateTime.UtcNow;

//             await _context.SaveChangesAsync();
//             return booking;
//         }

//         public async Task<Booking> CancelBookingAsync(int bookingId)
//         {
//             var booking = await _context.Bookings.FindAsync(bookingId);
//             if (booking == null) return null;

//             booking.Status = BookingStatus.Cancelled;
//             booking.UpdatedAt = DateTime.UtcNow;

//             await _context.SaveChangesAsync();
//             return booking;
//         }

//         public async Task<IEnumerable<Cleaner>> GetAvailableCleanersAsync(DateTime date, TimeSpan time, int durationHours)
//         {
//             var dayOfWeek = date.DayOfWeek;
//             var endTime = time.Add(TimeSpan.FromHours(durationHours));

//             return await _context.Cleaners
//                 .Where(c => c.IsAvailable)
//                 .Where(c => c.Availabilities.Any(a => 
//                     a.DayOfWeek == dayOfWeek && 
//                     a.IsAvailable &&
//                     a.StartTime <= time && 
//                     a.EndTime >= endTime))
//                 .Where(c => !c.Bookings.Any(b => 
//                     b.ScheduledDate.Date == date.Date &&
//                     b.Status == BookingStatus.Scheduled &&
//                     ((b.ScheduledTime <= time && b.ScheduledTime.Add(TimeSpan.FromHours(b.DurationHours)) > time) ||
//                      (b.ScheduledTime < endTime && b.ScheduledTime.Add(TimeSpan.FromHours(b.DurationHours)) >= endTime))))
//                 .ToListAsync();
//         }
//     }

//     public class SubscriptionService : ISubscriptionService
//     {
//         private readonly CleaningServiceDbContext _context;

//         public SubscriptionService(CleaningServiceDbContext context)
//         {
//             _context = context;
//         }

//         public async Task<Subscription> CreateSubscriptionAsync(CreateSubscriptionDto dto)
//         {
//             var plan = await _context.SubscriptionPlans.FindAsync(dto.SubscriptionPlanId);
//             if (plan == null) return null;

//             var subscription = new Subscription
//             {
//                 UserId = dto.UserId,
//                 SubscriptionPlanId = dto.SubscriptionPlanId,
//                 StartDate = dto.StartDate,
//                 NextCleaningDate = dto.StartDate,
//                 AmountPaid = plan.Price,
//                 PaymentMethod = dto.PaymentMethod,
//                 PaymentReference = dto.PaymentReference,
//                 Status = SubscriptionStatus.Active
//             };

//             _context.Subscriptions.Add(subscription);
//             await _context.SaveChangesAsync();
//             return subscription;
//         }

//         public async Task<Subscription> GetSubscriptionByIdAsync(int id)
//         {
//             return await _context.Subscriptions
//                 .Include(s => s.User)
//                 .Include(s => s.SubscriptionPlan)
//                 .Include(s => s.Bookings)
//                 .FirstOrDefaultAsync(s => s.Id == id);
//         }

//         public async Task<IEnumerable<Subscription>> GetSubscriptionsByUserAsync(int userId)
//         {
//             return await _context.Subscriptions
//                 .Include(s => s.SubscriptionPlan)
//                 .Include(s => s.Bookings)
//                 .Where(s => s.UserId == userId)
//                 .ToListAsync();
//         }

//         public async Task<Subscription> UpdateSubscriptionStatusAsync(int id, SubscriptionStatus status)
//         {
//             var subscription = await _context.Subscriptions.FindAsync(id);
//             if (subscription == null) return null;

//             subscription.Status = status;
//             subscription.UpdatedAt = DateTime.UtcNow;

//             if (status == SubscriptionStatus.Cancelled || status == SubscriptionStatus.Expired)
//             {
//                 subscription.EndDate = DateTime.UtcNow;
//             }

//             await _context.SaveChangesAsync();
//             return subscription;
//         }

//         public async Task<IEnumerable<Booking>> GenerateRecurringBookingsAsync(int subscriptionId)
//         {
//             var subscription = await GetSubscriptionByIdAsync(subscriptionId);
//             if (subscription == null || subscription.Status != SubscriptionStatus.Active)
//                 return new List<Booking>();

//             var bookings = new List<Booking>();
//             var currentDate = subscription.NextCleaningDate;
//             var endDate = DateTime.UtcNow.AddMonths(3); // Generate bookings for next 3 months

//             while (currentDate <= endDate)
//             {
//                 var booking = new Booking
//                 {
//                     UserId = subscription.UserId,
//                     SubscriptionId = subscriptionId,
//                     ScheduledDate = currentDate,
//                     ScheduledTime = new TimeSpan(9, 0, 0), // Default to 9 AM
//                     DurationHours = subscription.SubscriptionPlan.DurationHours,
//                     ServiceAddress = subscription.User.Address,
//                     Type = BookingType.Subscription,
//                     Price = subscription.SubscriptionPlan.Price,
//                     Status = BookingStatus.Scheduled
//                 };

//                 bookings.Add(booking);
//                 currentDate = currentDate.AddDays(subscription.SubscriptionPlan.CleaningFrequencyDays);
//             }

//             _context.Bookings.AddRange(bookings);
            
//             // Update next cleaning date
//             subscription.NextCleaningDate = currentDate;
//             subscription.UpdatedAt = DateTime.UtcNow;

//             await _context.SaveChangesAsync();
//             return bookings;
//         }

//         public async Task<IEnumerable<SubscriptionPlan>> GetAllSubscriptionPlansAsync()
//         {
//             return await _context.SubscriptionPlans
//                 .Where(sp => sp.IsActive)
//                 .OrderBy(sp => sp.Price)
//                 .ToListAsync();
//         }
//     }
// }

// // Controllers
// namespace CleaningService.Controllers
// {
//     [ApiController]
//     [Route("api/[controller]")]
//     public class UsersController : ControllerBase
//     {
//         private readonly IUserService _userService;

//         public UsersController(IUserService userService)
//         {
//             _userService = userService;
//         }

//         [HttpPost]
//         public async Task<ActionResult<User>> CreateUser(CreateUserDto dto)
//         {
//             try
//             {
//                 var user = await _userService.CreateUserAsync(dto);
//                 return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
//             }
//             catch (Exception ex)
//             {
//                 return BadRequest(ex.Message);
//             }
//         }

//         [HttpGet("{id}")]
//         public async Task<ActionResult<User>> GetUser(int id)
//         {
//             var user = await _userService.GetUserByIdAsync(id);
//             if (user == null) return NotFound();
//             return user;
//         }

//         [HttpGet]
//         public async Task<ActionResult<IEnumerable<User>>> GetUsers()
//         {
//             var users = await _userService.GetAllUsersAsync();
//             return Ok(users);
//         }

//         [HttpPut("{id}")]
//         public async Task<ActionResult<User>> UpdateUser(int id, CreateUserDto dto)
//         {
//             var user = await _userService.UpdateUserAsync(id, dto);
//             if (user == null) return NotFound();
//             return Ok(user);
//         }

//         [HttpDelete("{id}")]
//         public async Task<ActionResult> DeleteUser(int id)
//         {
//             var result = await _userService.DeleteUserAsync(id);
//             if (!result) return NotFound();
//             return NoContent();
//         }
//     }

//     [ApiController]
//     [Route("api/[controller]")]
//     public class BookingsController : ControllerBase
//     {
//         private readonly IBookingService _bookingService;

//         public BookingsController(IBookingService bookingService)
//         {
//             _bookingService = bookingService;
//         }

//         [HttpPost]
//         public async Task<ActionResult<Booking>> CreateBooking(CreateBookingDto dto)
//         {
//             try
//             {
//                 var booking = await _bookingService.CreateBookingAsync(dto);
//                 return CreatedAtAction(nameof(GetBooking), new { id = booking.Id }, booking);
//             }
//             catch (Exception ex)
//             {
//                 return BadRequest(ex.Message);
//             }
//         }

//         [HttpGet("{id}")]
//         public async Task<ActionResult<Booking>> GetBooking(int id)
//         {
//             var booking = await _bookingService.GetBookingByIdAsync(id);
//             if (booking == null) return NotFound();
//             return booking;
//         }

//         [HttpGet("user/{userId}")]
//         public async Task<ActionResult<IEnumerable<Booking>>> GetBookingsByUser(int userId)
//         {
//             var bookings = await _bookingService.GetBookingsByUserAsync(userId);
//             return Ok(bookings);
//         }

//         [HttpGet("cleaner/{cleanerId}")]
//         public async Task<ActionResult<IEnumerable<Booking>>> GetBookingsByCleaner(int cleanerId)
//         {
//             var bookings = await _bookingService.GetBookingsByCleanerAsync(cleanerId);
//             return Ok(bookings);
//         }

//         [HttpGet("date-range")]
//         public async Task<ActionResult<IEnumerable<Booking>>> GetBookingsByDateRange(
//             [FromQuery] DateTime startDate, 
//             [FromQuery] DateTime endDate)
//         {
//             var bookings = await _bookingService.GetBookingsByDateRangeAsync(startDate, endDate);
//             return Ok(bookings);
//         }

//         [HttpPost("assign-cleaner")]
//         public async Task<ActionResult<Booking>> AssignCleaner(CleanerAssignmentDto dto)
//         {
//             var booking = await _bookingService.AssignCleanerAsync(dto.BookingId, dto.CleanerId);
//             if (booking == null) return NotFound();
//             return Ok(booking);
//         }

//         [HttpPost("complete")]
//         public async Task<ActionResult<Booking>> CompleteBooking(BookingCompletionDto dto)
//         {
//             var booking = await _bookingService.CompleteBookingAsync(dto);
//             if (booking == null) return NotFound();
//             return Ok(booking);
//         }

//         [HttpPost("{id}/cancel")]
//         public async Task<ActionResult<Booking>> CancelBooking(int id)
//         {
//             var booking = await _bookingService.CancelBookingAsync(id);
//             if (booking == null) return NotFound();
//             return Ok(booking);
//         }

//         [HttpGet("available-cleaners")]
//         public async Task<ActionResult<IEnumerable<Cleaner>>> GetAvailableCleaners(
//             [FromQuery] DateTime date,
//             [FromQuery] string time,
//             [FromQuery] int durationHours)
//         {
//             if (!TimeSpan.TryParse(time, out var parsedTime))
//                 return BadRequest("Invalid time format");

//             var cleaners = await _bookingService.GetAvailableCleanersAsync(date, parsedTime, durationHours);
//             return Ok(cleaners);
//         }
//     }

//     [ApiController]
//     [Route("api/[controller]")]
//     public class SubscriptionsController : ControllerBase
//     {
//         private readonly ISubscriptionService _subscriptionService;

//         public SubscriptionsController(ISubscriptionService subscriptionService)
//         {
//             _subscriptionService = subscriptionService;
//         }

//         [HttpPost]
//         public async Task<ActionResult<Subscription>> CreateSubscription(CreateSubscriptionDto dto)
//         {
//             try
//             {
//                 var subscription = await _subscriptionService.CreateSubscriptionAsync(dto);
//                 if (subscription == null) return BadRequest("Invalid subscription plan");
//                 return CreatedAtAction(nameof(GetSubscription), new { id = subscription.Id }, subscription);
//             }
//             catch (Exception ex)
//             {
//                 return BadRequest(ex.Message);
//             }
//         }

//         [HttpGet("{id}")]
//         public async Task<ActionResult<Subscription>> GetSubscription(int id)
//         {
//             var subscription = await _subscriptionService.GetSubscriptionByIdAsync(id);
//             if (subscription == null) return NotFound();
//             return subscription;
//         }

//         [HttpGet("user/{userId}")]
//         public async Task<ActionResult<IEnumerable<Subscription>>> GetSubscriptionsByUser(int userId)
//         {
//             var subscriptions = await _subscriptionService.GetSubscriptionsByUserAsync(userId);
//             return Ok(subscriptions);
//         }

//         [HttpPut("{id}/status")]
//         public async Task<ActionResult<Subscription>> UpdateSubscriptionStatus(
//             int id, 
//             [FromBody] SubscriptionStatus status)
//         {
//             var subscription = await _subscriptionService.UpdateSubscriptionStatusAsync(id, status);
//             if (subscription == null) return NotFound();
//             return Ok(subscription);
//         }

//         [HttpPost("{id}/generate-bookings")]
//         public async Task<ActionResult<IEnumerable<Booking>>> GenerateRecurringBookings(int id)
//         {
//             var bookings = await _subscriptionService.GenerateRecurringBookingsAsync(id);
//             return Ok(bookings);
//         }

//         [HttpGet("plans")]
//         public async Task<ActionResult<IEnumerable<SubscriptionPlan>>> GetSubscriptionPlans()
//         {
//             var plans = await _subscriptionService.GetAllSubscriptionPlansAsync();
//             return Ok(plans);
//         }
//     }

//     [ApiController]
//     [Route("api/[controller]")]
//     public class CleanersController : ControllerBase
//     {
//         private readonly CleaningServiceDbContext _context;

//         public CleanersController(CleaningServiceDbContext context)
//         {
//             _context = context;
//         }

//         [HttpGet]
//         public async Task<ActionResult<IEnumerable<Cleaner>>> GetCleaners()
//         {
//             var cleaners = await _context.Cleaners
//                 .Include(c => c.Availabilities)
//                 .Where(c => c.IsAvailable)
//                 .ToListAsync();
//             return Ok(cleaners);
//         }

//         [HttpGet("{id}")]
//         public async Task<ActionResult<Cleaner>> GetCleaner(int id)
//         {
//             var cleaner = await _context.Cleaners
//                 .Include(c => c.Availabilities)
//                 .Include(c => c.Bookings)
//                 .FirstOrDefaultAsync(c => c.Id == id);
            
//             if (cleaner == null) return NotFound();
//             return Ok(cleaner);
//         }

//         [HttpPost]
//         public async Task<ActionResult<Cleaner>> CreateCleaner(CreateCleanerDto dto)
//         {
//             var cleaner = new Cleaner
//             {
//                 FullName = dto.FullName,
//                 Email = dto.Email,
//                 PhoneNumber = dto.PhoneNumber,
//                 Specialties = dto.Specialties,
//                 HourlyRate = dto.HourlyRate,
//                 IsAvailable = true
//             };

//             _context.Cleaners.Add(cleaner);
//             await _context.SaveChangesAsync();
            
//             return CreatedAtAction(nameof(GetCleaner), new { id = cleaner.Id }, cleaner);
//         }

//         [HttpPost("{id}/availability")]
//         public async Task<ActionResult> SetCleanerAvailability(int id, CreateAvailabilityDto dto)
//         {
//             var cleaner = await _context.Cleaners.FindAsync(id);
//             if (cleaner == null) return NotFound();

//             var availability = new CleanerAvailability
//             {
//                 CleanerId = id,
//                 DayOfWeek = dto.DayOfWeek,
//                 StartTime = dto.StartTime,
//                 EndTime = dto.EndTime,
//                 IsAvailable = dto.IsAvailable
//             };

//             _context.CleanerAvailabilities.Add(availability);
//             await _context.SaveChangesAsync();
            
//             return Ok();
//         }
//     }
// }

// // Additional DTOs needed for cleaners
// namespace CleaningService.DTOs
// {
//     public class CreateCleanerDto
//     {
//         public string FullName { get; set; }
//         public string Email { get; set; }
//         public string PhoneNumber { get; set; }
//         public string? Specialties { get; set; }
//         public decimal HourlyRate { get; set; }
//     }

//     public class CreateAvailabilityDto
//     {
//         public DayOfWeek DayOfWeek { get; set; }
//         public TimeSpan StartTime { get; set; }
//         public TimeSpan EndTime { get; set; }
//         public bool IsAvailable { get; set; } = true;
//     }
// }